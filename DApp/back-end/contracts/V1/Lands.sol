//SPDX-License-Identifier: MIT
pragma solidity ^0.8.17;


// import { Town } from "./Town.sol";
import { ERC721 } from "@openzeppelin/contracts/token/ERC721/ERC721.sol";
import { Ownable } from "@openzeppelin/contracts/access/Ownable.sol";
import { StringUtils } from "contracts/StringUtils.sol";


error Lands__InvalidCoordinate();
error Lands__LandAlreadyMinted();
error Lands__InsufficientPrice();

contract Lands is ERC721, Ownable {

    //  ******************************************************************************
    //  ******************************************************************************
    //  ******************************************************************************
    //  ********************************   Events  ***********************************
    //  ******************************************************************************
    //  ******************************************************************************
    //  ******************************************************************************




    //  ******************************************************************************
    //  ******************************************************************************
    //  ******************************************************************************
    //  *******************************   Vairables  *********************************
    //  ******************************************************************************
    //  ******************************************************************************
    //  ******************************************************************************


    uint256 private constant defaultLandPrice = 20000000 gwei; // Equal 0.02 ether
    // mapping (uint256 => Land) public tokenIdLand;
    // mapping (address => uint8) private difficultyCost;


    // struct Land {
    //     uint8 coordinateX;
    //     uint8 coordinateY;
    // }



    //  ******************************************************************************
    //  ******************************************************************************
    //  ******************************************************************************
    //  ******************************   Constructor  ********************************
    //  ******************************************************************************
    //  ******************************************************************************
    //  ******************************************************************************




    constructor() ERC721("Polygon wars land","PWL"){
    }



    //  ******************************************************************************
    //  ******************************************************************************
    //  ******************************************************************************
    //  *******************************   Modifiers  *********************************
    //  ******************************************************************************
    //  ******************************************************************************
    //  ******************************************************************************


    modifier landOwner (uint256 id ) {
        require(msg.sender == ownerOf(id), "Not owner");
        _;
    }
    // Check if land with this coordinate is already minted or not.
    // modifier isExist (uint8 x, uint8 y){
    //     uint256 tokenId = StringUtils.concatenate(x, y);
    //     if ( _ownerOf(tokenId) != address(0)) {
    //         revert Lands__LandAlreadyMinted(); 
    //     }
    //     _;
    // }
    // Check if range of location coordinate is in authorized range.
    modifier isCorrectCoordinate (uint8 x, uint8 y) {
        if (x < 100 || x > 999 || y < 100 || y > 999) {
            revert Lands__InvalidCoordinate();
        }
        _;
    }


    //  ******************************************************************************
    //  ******************************************************************************
    //  ******************************************************************************
    //  ***********************   External & public functions  ***********************
    //  ******************************************************************************
    //  ******************************************************************************
    //  ******************************************************************************


    // Mint new land by coordinate in x and y dimension
    function mintLand(uint8 x, uint8 y) external payable isCorrectCoordinate(x,y){
        if (msg.value < defaultLandPrice) {
            revert Lands__InsufficientPrice();
        }

        uint256 tokenId = StringUtils.concatenate(x, y);
        _mint(msg.sender, tokenId);
        // tokenIdLand[tokenId] = Land(x,y);
    }







    //  ******************************************************************************
    //  ******************************************************************************
    //  ******************************************************************************
    //  **************************   Only owner functions  ***************************
    //  ******************************************************************************
    //  ******************************************************************************
    //  ******************************************************************************




    //  ******************************************************************************
    //  ******************************************************************************
    //  ******************************************************************************
    //  *****************************   View functions  ******************************
    //  ******************************************************************************
    //  ******************************************************************************
    //  ******************************************************************************


    // function getLand(uint256 tokenId) external view returns(Land memory) {
    //     return tokenIdLand[tokenId];
    // }

    function getPrice() pure public returns (uint256) {
        return defaultLandPrice;
    }



    function URI () public view returns (string memory){
        return _baseURI();
    }

    function tokenURI(
        uint256 _tokenId
    ) public view virtual override returns (string memory) {
        require(
            _exists(_tokenId),
            "ERC721Metadata: URI query for nonexistent token"
        );

        string memory currentBaseURI = _baseURI();

        return
            bytes(currentBaseURI).length > 0
                ? string(
                    abi.encodePacked(    
                        // StringUtils.toString(tokenIdLand[_tokenId].coordinateX) ,
                        // StringUtils.toString(tokenIdLand[_tokenId].coordinateY),
                        // StringUtils.toString(tokenIdLand[_tokenId].level) ,
                        currentBaseURI
                        // ".json"
                    )
                )
                : "";
    }

    //  ******************************************************************************
    //  ******************************************************************************
    //  ******************************************************************************
    //  ****************************   Internal functions  ***************************
    //  ******************************************************************************
    //  ******************************************************************************
    //  ******************************************************************************

    // Claiming collected amount of an asset


    function _baseURI() internal  view virtual override   returns (string memory) {
        return "https://ipfs.io/ipfs/Qmaz1NiFrfiXS9BckHNySzdmkpq5GTirU2RoTt4Sji8hdm";
    }


   
}
